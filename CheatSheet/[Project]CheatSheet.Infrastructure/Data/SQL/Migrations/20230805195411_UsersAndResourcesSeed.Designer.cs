// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _Project_CheatSheet.Infrastructure.Data.SQL;

#nullable disable

namespace _Project_CheatSheet.Data.Migrations
{
    [DbContext(typeof(CheatSheetDbContext))]
    [Migration("20230805195411_UsersAndResourcesSeed")]
    partial class UsersAndResourcesSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Name = "Arrays"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Data structures"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Algorithms"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Object-Oriented Programming"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Recursion"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Sorting"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Graph Theory"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Dynamic Programming"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Database Management"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryCourses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourseCourses", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryCourseId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "CategoryCourseId");

                    b.HasIndex("CategoryCourseId");

                    b.ToTable("CategoryCourseCourses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LocationIssue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesIssues");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryResource", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("CategoriesResources");

                    b.HasData(
                        new
                        {
                            CategoryId = 11,
                            ResourceId = new Guid("ccea7bf5-88b4-4851-80d6-c40240b8a066")
                        },
                        new
                        {
                            CategoryId = 15,
                            ResourceId = new Guid("ccea7bf5-88b4-4851-80d6-c40240b8a066")
                        },
                        new
                        {
                            CategoryId = 16,
                            ResourceId = new Guid("d7b9a245-d1bc-400e-b66e-079c0ce21548")
                        },
                        new
                        {
                            CategoryId = 20,
                            ResourceId = new Guid("d7b9a245-d1bc-400e-b66e-079c0ce21548")
                        },
                        new
                        {
                            CategoryId = 12,
                            ResourceId = new Guid("84159dce-3fb9-4b09-ab68-ea8113539561")
                        },
                        new
                        {
                            CategoryId = 17,
                            ResourceId = new Guid("84159dce-3fb9-4b09-ab68-ea8113539561")
                        },
                        new
                        {
                            CategoryId = 13,
                            ResourceId = new Guid("7a51c1d2-7590-46a7-8540-38411ce630b9")
                        },
                        new
                        {
                            CategoryId = 18,
                            ResourceId = new Guid("7a51c1d2-7590-46a7-8540-38411ce630b9")
                        },
                        new
                        {
                            CategoryId = 14,
                            ResourceId = new Guid("2d50f369-c713-47eb-bc81-2dfc150e73c0")
                        },
                        new
                        {
                            CategoryId = 19,
                            ResourceId = new Guid("2d50f369-c713-47eb-bc81-2dfc150e73c0")
                        },
                        new
                        {
                            CategoryId = 19,
                            ResourceId = new Guid("ceb5990a-222b-4b2a-a57b-5404bfb8c79d")
                        },
                        new
                        {
                            CategoryId = 15,
                            ResourceId = new Guid("ceb5990a-222b-4b2a-a57b-5404bfb8c79d")
                        },
                        new
                        {
                            CategoryId = 13,
                            ResourceId = new Guid("94657488-0349-45e4-8224-66594d0e267e")
                        },
                        new
                        {
                            CategoryId = 15,
                            ResourceId = new Guid("94657488-0349-45e4-8224-66594d0e267e")
                        },
                        new
                        {
                            CategoryId = 20,
                            ResourceId = new Guid("94657488-0349-45e4-8224-66594d0e267e")
                        },
                        new
                        {
                            CategoryId = 16,
                            ResourceId = new Guid("94657488-0349-45e4-8224-66594d0e267e")
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1903659-fb76-4042-bb5e-bb597c631cca"),
                            Content = "This is comment send by seeded admin",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1431),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ResourceId = new Guid("d7b9a245-d1bc-400e-b66e-079c0ce21548"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        },
                        new
                        {
                            Id = new Guid("56956421-bb46-491f-9a62-b23ae98b23a0"),
                            Content = "This is comment send by seeded admin",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1433),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ResourceId = new Guid("7a51c1d2-7590-46a7-8540-38411ce630b9"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        },
                        new
                        {
                            Id = new Guid("21ee6178-9eec-4f6f-afb1-fb8460d19faf"),
                            Content = "This is comment send by seeded admin",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1434),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ResourceId = new Guid("2d50f369-c713-47eb-bc81-2dfc150e73c0"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        },
                        new
                        {
                            Id = new Guid("515353a0-33e5-4c74-ab50-673c2ee5e8b1"),
                            Content = "This is comment send by seeded admin",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1436),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ResourceId = new Guid("ceb5990a-222b-4b2a-a57b-5404bfb8c79d"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CommentLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryIssueId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryIssueId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccea7bf5-88b4-4851-80d6-c40240b8a066"),
                            Content = "C# advanced is a nice course to learn, to become better",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1381),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.filepicker.io/api/file/2ZsQkVfR0yhZPRO33JEw",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "C# Advanced 1 2023",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        },
                        new
                        {
                            Id = new Guid("d7b9a245-d1bc-400e-b66e-079c0ce21548"),
                            Content = "C# advanced is a nice course to learn, to become better",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1385),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.filepicker.io/api/file/2ZsQkVfR0yhZPRO33JEw",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "C# Advanced 2 2023",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        },
                        new
                        {
                            Id = new Guid("84159dce-3fb9-4b09-ab68-ea8113539561"),
                            Content = "Take your JavaScript skills to the next level with our comprehensive JavaScript Advanced course.learning.\r\nPrerequisites:\r\nThis course is de",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1387),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://i.ytimg.com/vi/YT8s-90oDC0/maxresdefault.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Javascript Advanced 2023",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        },
                        new
                        {
                            Id = new Guid("7a51c1d2-7590-46a7-8540-38411ce630b9"),
                            Content = "Learn how to use Python for data analysis, visualization, and machine learning.",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1404),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.example.com/images/python_data_science.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Python for Data Science",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        },
                        new
                        {
                            Id = new Guid("2d50f369-c713-47eb-bc81-2dfc150e73c0"),
                            Content = "An introductory course to machine learning algorithms and techniques.",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1405),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.example.com/images/intro_to_ml.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Introduction to Machine Learning",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        },
                        new
                        {
                            Id = new Guid("ceb5990a-222b-4b2a-a57b-5404bfb8c79d"),
                            Content = "Master the art of building modern web applications using React.js.",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1407),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.example.com/images/react_web_dev.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Web Development with React",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        },
                        new
                        {
                            Id = new Guid("94657488-0349-45e4-8224-66594d0e267e"),
                            Content = "Explore the fundamentals of artificial intelligence and its applications.",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 338, DateTimeKind.Utc).AddTicks(1409),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.example.com/images/intro_to_ai.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Introduction to Artificial Intelligence",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.ResourceLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceLikes");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("VideoId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileBackground")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProfileDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEducation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserJob")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341e7640-881b-4ba5-a7cd-da4d7c8db203",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a95bd67f-e2df-475d-ba00-405ec08c0c05",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 319, DateTimeKind.Utc).AddTicks(3527),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDKe2n1Y/5E49Nav6HYjHaUzJQrsooMjoPyx4Zl2ptkoqy/IfmyUmpRK7Hw1ROFiag==",
                            PhoneNumberConfirmed = false,
                            ProfileDescription = "This is my in-depth description",
                            SecurityStamp = "87fb375f-bf38-4acd-bdbe-984649f9c2fc",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserEducation = "At Harvard",
                            UserJob = "Working from home",
                            UserName = "administrator"
                        },
                        new
                        {
                            Id = "7df422ab-b2e1-450d-a773-c960d17e3e09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c16b144-67ac-4f7f-8512-4157e5c72170",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 319, DateTimeKind.Utc).AddTicks(3545),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOHN_DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGaeyVi9mx1IZ86lQhWGDUNzjYiSKnWkZSuiDnVACmU35yx90fTSgwlw+YkWh+wTMg==",
                            PhoneNumberConfirmed = false,
                            ProfileDescription = "I love coding and building cool applications!",
                            SecurityStamp = "cd07dadb-d1d9-4ba3-b599-841979d160de",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserEducation = "Self-taught",
                            UserJob = "Software Engineer",
                            UserName = "john_doe"
                        },
                        new
                        {
                            Id = "48e5b1d3-cd95-41c9-9ae9-718765be6338",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f29d3d99-8e65-4044-82af-8c57687212d9",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 5, 19, 54, 11, 319, DateTimeKind.Utc).AddTicks(3556),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JANE_SMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAECxaCV/2PikmiTo8QNTgcP4gFP7RrsqpZMAK5ghGJmh9YU7pJouhFzwdrcTr/OGnpA==",
                            PhoneNumberConfirmed = false,
                            ProfileDescription = "Passionate about creating beautiful designs.",
                            SecurityStamp = "fe493286-8e8d-4677-83d3-6b9d31a25d21",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserEducation = "Art Institute",
                            UserJob = "Graphic Designer",
                            UserName = "jane_smith"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.UserCourses", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "02174cf0–9412–4cfe-afbf-59f706d72cf0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "02174cf0–9412–4cfe-afbf-59f706d72cf1",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "02174cf0–9412–4cfe-afbf-59f706d72cf2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "341e7640-881b-4ba5-a7cd-da4d7c8db203",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourseCourses", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourse", "CategoryCourse")
                        .WithMany("CategoryCourseCourses")
                        .HasForeignKey("CategoryCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", "Course")
                        .WithMany("CategoryCourseCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryResource", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Category", "Category")
                        .WithMany("CategoryResources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", "Resource")
                        .WithMany("CategoryResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Comment", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", "Resource")
                        .WithMany("Comments")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CommentLike", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Comment", "Comment")
                        .WithMany("CommentLikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Issue", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryIssue", "CategoryIssue")
                        .WithMany("Issues")
                        .HasForeignKey("CategoryIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Topic", "Topic")
                        .WithMany("TopicIssues")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("Issue")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryIssue");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("Resources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.ResourceLike", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", "Resource")
                        .WithMany("ResourceLikes")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("ResourceLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Topic", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Video", "Video")
                        .WithMany("Topics")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.UserCourses", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", "Course")
                        .WithMany("UsersCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Category", b =>
                {
                    b.Navigation("CategoryResources");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourse", b =>
                {
                    b.Navigation("CategoryCourseCourses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryIssue", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Comment", b =>
                {
                    b.Navigation("CommentLikes");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", b =>
                {
                    b.Navigation("CategoryCourseCourses");

                    b.Navigation("Topics");

                    b.Navigation("UsersCourses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", b =>
                {
                    b.Navigation("CategoryResources");

                    b.Navigation("Comments");

                    b.Navigation("ResourceLikes");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Topic", b =>
                {
                    b.Navigation("TopicIssues");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", b =>
                {
                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");

                    b.Navigation("Issue");

                    b.Navigation("ResourceLikes");

                    b.Navigation("Resources");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Video", b =>
                {
                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
