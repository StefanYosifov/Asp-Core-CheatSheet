// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _Project_CheatSheet.Infrastructure.Data.SQL;

#nullable disable

namespace _Project_CheatSheet.Data.Migrations
{
    [DbContext(typeof(CheatSheetDbContext))]
    partial class CheatSheetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Name = "Arrays"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Data structures"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Algorithms"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Object-Oriented Programming"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Recursion"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Sorting"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Graph Theory"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Dynamic Programming"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Database Management"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryCourses");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            Name = "Web"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Django"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Flask"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 25,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 26,
                            Name = ".Net"
                        },
                        new
                        {
                            Id = 27,
                            Name = "MVC"
                        },
                        new
                        {
                            Id = 28,
                            Name = "API"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Databases"
                        },
                        new
                        {
                            Id = 30,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Math"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Windows"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Servers"
                        },
                        new
                        {
                            Id = 35,
                            Name = "DataStructures"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Security"
                        },
                        new
                        {
                            Id = 37,
                            Name = "UX/UI Design"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Photography and Design"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Artificial Intelligence"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourseCourses", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryCourseId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "CategoryCourseId");

                    b.HasIndex("CategoryCourseId");

                    b.ToTable("CategoryCourseCourses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            CategoryCourseId = 21
                        },
                        new
                        {
                            CourseId = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            CategoryCourseId = 25
                        },
                        new
                        {
                            CourseId = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            CategoryCourseId = 35
                        },
                        new
                        {
                            CourseId = new Guid("87df5fa0-4c6e-4ae5-8b8c-6b6aca412107"),
                            CategoryCourseId = 38
                        },
                        new
                        {
                            CourseId = new Guid("10838b25-d523-41f2-bf93-04302f1c79c9"),
                            CategoryCourseId = 36
                        },
                        new
                        {
                            CourseId = new Guid("adcd69ea-02d8-4990-bd6e-5dfbe9fef815"),
                            CategoryCourseId = 39
                        },
                        new
                        {
                            CourseId = new Guid("320439e3-1b9b-4a8e-9f88-97b85cfd0ab7"),
                            CategoryCourseId = 24
                        },
                        new
                        {
                            CourseId = new Guid("320439e3-1b9b-4a8e-9f88-97b85cfd0ab7"),
                            CategoryCourseId = 32
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LocationIssue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesIssues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationIssue = "Problem with the title"
                        },
                        new
                        {
                            Id = 2,
                            LocationIssue = "Problem with the description"
                        },
                        new
                        {
                            Id = 3,
                            LocationIssue = "Problem with the video"
                        },
                        new
                        {
                            Id = 4,
                            LocationIssue = "Problem with the pdf file"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryResource", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("CategoriesResources");

                    b.HasData(
                        new
                        {
                            CategoryId = 11,
                            ResourceId = new Guid("20e979bb-e8a4-49a1-947b-515f125bfd5a")
                        },
                        new
                        {
                            CategoryId = 15,
                            ResourceId = new Guid("20e979bb-e8a4-49a1-947b-515f125bfd5a")
                        },
                        new
                        {
                            CategoryId = 16,
                            ResourceId = new Guid("8d2b966c-0e52-4078-aaff-63f674bdc306")
                        },
                        new
                        {
                            CategoryId = 20,
                            ResourceId = new Guid("8d2b966c-0e52-4078-aaff-63f674bdc306")
                        },
                        new
                        {
                            CategoryId = 12,
                            ResourceId = new Guid("74c78874-479b-4514-92e3-bdd65b1c262f")
                        },
                        new
                        {
                            CategoryId = 17,
                            ResourceId = new Guid("74c78874-479b-4514-92e3-bdd65b1c262f")
                        },
                        new
                        {
                            CategoryId = 13,
                            ResourceId = new Guid("2b53dad6-ff6a-433e-b0dc-d21632d8ffac")
                        },
                        new
                        {
                            CategoryId = 18,
                            ResourceId = new Guid("2b53dad6-ff6a-433e-b0dc-d21632d8ffac")
                        },
                        new
                        {
                            CategoryId = 14,
                            ResourceId = new Guid("83f91203-f951-4f57-af5e-df3c7b7af2c3")
                        },
                        new
                        {
                            CategoryId = 19,
                            ResourceId = new Guid("83f91203-f951-4f57-af5e-df3c7b7af2c3")
                        },
                        new
                        {
                            CategoryId = 19,
                            ResourceId = new Guid("a2af6703-e2cd-48d5-9ad3-1ea91d8ba63e")
                        },
                        new
                        {
                            CategoryId = 15,
                            ResourceId = new Guid("a2af6703-e2cd-48d5-9ad3-1ea91d8ba63e")
                        },
                        new
                        {
                            CategoryId = 13,
                            ResourceId = new Guid("9b56dbbc-e61a-4994-8908-662be812a130")
                        },
                        new
                        {
                            CategoryId = 15,
                            ResourceId = new Guid("9b56dbbc-e61a-4994-8908-662be812a130")
                        },
                        new
                        {
                            CategoryId = 20,
                            ResourceId = new Guid("9b56dbbc-e61a-4994-8908-662be812a130")
                        },
                        new
                        {
                            CategoryId = 16,
                            ResourceId = new Guid("9b56dbbc-e61a-4994-8908-662be812a130")
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2dac94c0-5caf-4477-9b52-7a5c75dbcc97"),
                            Content = "This is comment send by seeded admin",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5587),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ResourceId = new Guid("8d2b966c-0e52-4078-aaff-63f674bdc306"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        },
                        new
                        {
                            Id = new Guid("573b22ad-b55f-4133-bc08-4606d6f678d6"),
                            Content = "This is comment send by seeded admin",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5589),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ResourceId = new Guid("2b53dad6-ff6a-433e-b0dc-d21632d8ffac"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        },
                        new
                        {
                            Id = new Guid("3d331e25-91d8-4bc5-93cc-ce4811c6201e"),
                            Content = "This is comment send by seeded admin",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5591),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ResourceId = new Guid("83f91203-f951-4f57-af5e-df3c7b7af2c3"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        },
                        new
                        {
                            Id = new Guid("f98af5a2-e334-4fa5-a429-2348cfeb5996"),
                            Content = "This is comment send by seeded admin",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5592),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ResourceId = new Guid("a2af6703-e2cd-48d5-9ad3-1ea91d8ba63e"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CommentLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5599),
                            Description = "Welcome to the JS Advanced August 2023 course! This comprehensive and hands-on training program is designed to take your JavaScript skills to the next level. Whether you're an aspiring web developer, an experienced coder looking to enhance your frontend abilities, or simply someone eager to delve deeper into the world of JavaScript, this course has something to offer for everyone.\r\n\r\nThroughout the course, you'll dive into the advanced concepts of JavaScript, exploring topics like closures, prototypes, asynchronous programming, and more. You'll gain a solid understanding of how to leverage JavaScript's full potential and build robust, efficient, and dynamic web applications.\r\n\r\nLed by industry experts, our interactive sessions and practical exercises will give you ample opportunities to apply your knowledge and reinforce your learning. By the end of this course, you'll be equipped with the skills and confidence to tackle complex JavaScript projects and stand out in the competitive world of web development.\r\n\r\nEnroll now and embark on a journey of JavaScript mastery. Don't miss this chance to become a proficient JavaScript developer and unlock a world of exciting possibilities in the realm of web development. Join us for JS Advanced August 2023!\"\r\n\r\nPlease feel free to customize and expand upon this description to suit your specific course content and target audience.",
                            EndDate = new DateTime(2023, 11, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5599),
                            ImageUrl = "https://play-lh.googleusercontent.com/-EwtKuAhXBB9FgIe-XYAZt6vUbYPCZQp61dwO5HVyzBAnMUjdBavbWXcqrRWkT8a_rQ=w240-h480-rw",
                            Price = 49.99m,
                            StartDate = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5599),
                            Title = "JS Advanced August 2023",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("87df5fa0-4c6e-4ae5-8b8c-6b6aca412107"),
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5606),
                            Description = "Unleash your creative potential and capture stunning images with our Photography Fundamentals course. Learn about camera settings, composition, lighting, and post-processing techniques to bring your photographs to life. Whether you're using a DSLR, mirrorless, or smartphone camera, this course will help you master the art of photography and tell captivating visual stories.",
                            EndDate = new DateTime(2023, 9, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5607),
                            ImageUrl = "https://cdn01.alison-static.net/courses/1326/alison_courseware_intro_1326.jpg",
                            Price = 39.99m,
                            StartDate = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5606),
                            Title = "Photography Fundamentals for Beginners",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("10838b25-d523-41f2-bf93-04302f1c79c9"),
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5608),
                            Description = "Discover the world of ethical hacking and cybersecurity, where you'll learn to defend against cyber threats and secure digital assets. Explore common attack vectors, penetration testing techniques, and vulnerability assessment methods. With hands-on labs, you'll gain practical experience in identifying and mitigating security risks. Prepare yourself to become a cybersecurity expert and contribute to a safer online world.",
                            EndDate = new DateTime(2023, 11, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5609),
                            ImageUrl = "https://www.udacity.com/www-proxy/contentful/assets/2y9b3o528xhq/4PjDlJzjwAB1tWZ5qL93cz/df5750f8ec5fad0c11b8f9d0582d5f0b/SEO-Image-4.jpg",
                            Price = 89.99m,
                            StartDate = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5609),
                            Title = "Introduction to Ethical Hacking and Cybersecurity",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("adcd69ea-02d8-4990-bd6e-5dfbe9fef815"),
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5613),
                            Description = "Delve into the cutting-edge field of Artificial Intelligence (AI) and explore its diverse applications. This course provides a solid foundation in AI concepts, including machine learning, neural networks, natural language processing, and robotics. Gain insights into how AI is shaping various industries and be prepared to harness the potential of this transformative technology.",
                            EndDate = new DateTime(2023, 11, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5613),
                            ImageUrl = "https://cdn.mindmajix.com/courses/artificial-intelligence-training.png",
                            Price = 129.99m,
                            StartDate = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5613),
                            Title = "Introduction to Artificial Intelligence",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("320439e3-1b9b-4a8e-9f88-97b85cfd0ab7"),
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5615),
                            Description = "Dive into the fascinating world of data science and machine learning with our comprehensive Python course. Discover how to manipulate and analyze data, build predictive models, and derive valuable insights from complex datasets. Whether you're a data enthusiast or aspiring data scientist, this course will equip you with the essential skills to excel in the data-driven industry.",
                            EndDate = new DateTime(2023, 12, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5615),
                            ImageUrl = "https://cdn.mindmajix.com/courses/python-training.png",
                            Price = 99.99m,
                            StartDate = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5615),
                            Title = "Python for Data Science and Machine Learning",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryIssueId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryIssueId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20e979bb-e8a4-49a1-947b-515f125bfd5a"),
                            Content = "C# advanced is a nice course to learn, to become better",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5554),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.filepicker.io/api/file/2ZsQkVfR0yhZPRO33JEw",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "C# Advanced 1 2023",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        },
                        new
                        {
                            Id = new Guid("8d2b966c-0e52-4078-aaff-63f674bdc306"),
                            Content = "C# advanced is a nice course to learn, to become better",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5558),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.filepicker.io/api/file/2ZsQkVfR0yhZPRO33JEw",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "C# Advanced 2 2023",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        },
                        new
                        {
                            Id = new Guid("74c78874-479b-4514-92e3-bdd65b1c262f"),
                            Content = "Take your JavaScript skills to the next level with our comprehensive JavaScript Advanced course.learning.\r\nPrerequisites:\r\nThis course is de",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5560),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://i.ytimg.com/vi/YT8s-90oDC0/maxresdefault.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Javascript Advanced 2023",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        },
                        new
                        {
                            Id = new Guid("2b53dad6-ff6a-433e-b0dc-d21632d8ffac"),
                            Content = "Learn how to use Python for data analysis, visualization, and machine learning.",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5562),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.example.com/images/python_data_science.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Python for Data Science",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        },
                        new
                        {
                            Id = new Guid("83f91203-f951-4f57-af5e-df3c7b7af2c3"),
                            Content = "An introductory course to machine learning algorithms and techniques.",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5563),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.example.com/images/intro_to_ml.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Introduction to Machine Learning",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        },
                        new
                        {
                            Id = new Guid("a2af6703-e2cd-48d5-9ad3-1ea91d8ba63e"),
                            Content = "Master the art of building modern web applications using React.js.",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5565),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.example.com/images/react_web_dev.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Web Development with React",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        },
                        new
                        {
                            Id = new Guid("9b56dbbc-e61a-4994-8908-662be812a130"),
                            Content = "Explore the fundamentals of artificial intelligence and its applications.",
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5574),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.example.com/images/intro_to_ai.jpg",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Introduction to Artificial Intelligence",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.ResourceLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceLikes");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("VideoId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b589ca4-c727-419c-867d-032524820c4a"),
                            Content = "This is a brief introduction to Javascript",
                            CourseId = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5702),
                            EndTime = new DateTime(2023, 8, 30, 15, 57, 3, 693, DateTimeKind.Local).AddTicks(5676),
                            Name = "Introduction to javascript",
                            StartTime = new DateTime(2023, 8, 30, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5671),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoId = new Guid("a8042461-09b4-47f7-8d62-02e8fa5c14f2")
                        },
                        new
                        {
                            Id = new Guid("627d913f-4ef1-411d-b1b7-95a77db73666"),
                            Content = "This is a brief introduction to Javascript arrays",
                            CourseId = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5706),
                            EndTime = new DateTime(2023, 9, 2, 15, 57, 3, 693, DateTimeKind.Local).AddTicks(5705),
                            Name = "Javascript arrays",
                            StartTime = new DateTime(2023, 9, 2, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5704),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoId = new Guid("e8eeb398-ab72-4c95-a038-8e7d25dd7a8d")
                        },
                        new
                        {
                            Id = new Guid("0b7288c6-8b6f-4c39-a2d7-c47e99232901"),
                            Content = "This is a throughout introduction to Javascript objects",
                            CourseId = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5712),
                            EndTime = new DateTime(2023, 9, 5, 15, 57, 3, 693, DateTimeKind.Local).AddTicks(5710),
                            Name = "Javascript objects",
                            StartTime = new DateTime(2023, 9, 5, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5710),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoId = new Guid("e8eeb398-ab72-4c95-a038-8e7d25dd7a8d")
                        },
                        new
                        {
                            Id = new Guid("20ede8e8-b460-48f7-af8d-b2e23432023b"),
                            Content = "This is a throughout introduction to Javascript arrays",
                            CourseId = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            CreatedBy = "administrator",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5716),
                            EndTime = new DateTime(2023, 9, 9, 15, 57, 3, 693, DateTimeKind.Local).AddTicks(5714),
                            Name = "Javascript Operators",
                            StartTime = new DateTime(2023, 9, 9, 8, 57, 3, 693, DateTimeKind.Utc).AddTicks(5714),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoId = new Guid("e8eeb398-ab72-4c95-a038-8e7d25dd7a8d")
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileBackground")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProfileDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEducation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserJob")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "69d67468-e0d1-44b5-8b9a-719889b230b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab902a04-a484-4b80-a339-432073d0a348",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 675, DateTimeKind.Utc).AddTicks(6071),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEN70t397JeZeZgizgdHP0KTNHyq5Phhmy6gJ7hq2/H7XT47lDJ+cOuoHk0cWNOAN4A==",
                            PhoneNumberConfirmed = false,
                            ProfileDescription = "This is my in-depth description",
                            SecurityStamp = "c3a11ee6-46cf-418a-bcf5-3c4e193000fe",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserEducation = "At Harvard",
                            UserJob = "Working from home",
                            UserName = "administrator"
                        },
                        new
                        {
                            Id = "fc5d084d-38d6-4ff0-abe6-abb2e1e3f323",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68d97103-9f8f-4528-b001-5a0bc9a6fc27",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 675, DateTimeKind.Utc).AddTicks(6089),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOHN_DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAENzPfuoq+vP5CAVikqeMsV4S1j1ikT24kQeinOwZVoSCgePrgQiDQzQsh7c/ArEigg==",
                            PhoneNumberConfirmed = false,
                            ProfileDescription = "I love coding and building cool applications!",
                            SecurityStamp = "209979ec-2418-421e-a9c2-bde190f7ce1a",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserEducation = "Self-taught",
                            UserJob = "Software Engineer",
                            UserName = "john_doe"
                        },
                        new
                        {
                            Id = "e2432f3d-489e-4230-81ff-b110e80cc165",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c0840ce-76fe-4650-a235-aaa48ee2f5f1",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2023, 8, 6, 8, 57, 3, 675, DateTimeKind.Utc).AddTicks(6099),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JANE_SMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEBP7Gtp7JHbAqrg3MirV+IibBeGIUdSVaFN8pQlqZymHU2qpkW1pZn/MUgVTlU5xew==",
                            PhoneNumberConfirmed = false,
                            ProfileDescription = "Passionate about creating beautiful designs.",
                            SecurityStamp = "bbdf9735-d833-4c30-a6cc-e7e6ceb52f4f",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserEducation = "Art Institute",
                            UserJob = "Graphic Designer",
                            UserName = "jane_smith"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.UserCourses", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            UserId = "fc5d084d-38d6-4ff0-abe6-abb2e1e3f323"
                        },
                        new
                        {
                            CourseId = new Guid("e67079bf-2bb7-4183-9ac1-47d587d7e091"),
                            UserId = "e2432f3d-489e-4230-81ff-b110e80cc165"
                        },
                        new
                        {
                            CourseId = new Guid("10838b25-d523-41f2-bf93-04302f1c79c9"),
                            UserId = "fc5d084d-38d6-4ff0-abe6-abb2e1e3f323"
                        },
                        new
                        {
                            CourseId = new Guid("adcd69ea-02d8-4990-bd6e-5dfbe9fef815"),
                            UserId = "e2432f3d-489e-4230-81ff-b110e80cc165"
                        });
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8042461-09b4-47f7-8d62-02e8fa5c14f2"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Javascript Introduction",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=W6NZfCO5SIk"
                        },
                        new
                        {
                            Id = new Guid("e8eeb398-ab72-4c95-a038-8e7d25dd7a8d"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Javascript Arrays",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=7W4pQQ20nJg"
                        },
                        new
                        {
                            Id = new Guid("4d6ccb28-7def-4e34-a596-4579d8473aec"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Javascript Objects",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=BRSg22VacUA"
                        },
                        new
                        {
                            Id = new Guid("83d9d8cd-2179-40c9-b3e2-2f319b4a377b"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Javascript Operators",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=FZzyij43A54"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "02174cf0–9412–4cfe-afbf-59f706d72cf0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "02174cf0–9412–4cfe-afbf-59f706d72cf1",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "02174cf0–9412–4cfe-afbf-59f706d72cf2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "69d67468-e0d1-44b5-8b9a-719889b230b9",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourseCourses", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourse", "CategoryCourse")
                        .WithMany("CategoryCourseCourses")
                        .HasForeignKey("CategoryCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", "Course")
                        .WithMany("CategoryCourseCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryResource", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Category", "Category")
                        .WithMany("CategoryResources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", "Resource")
                        .WithMany("CategoryResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Comment", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", "Resource")
                        .WithMany("Comments")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CommentLike", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Comment", "Comment")
                        .WithMany("CommentLikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Issue", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryIssue", "CategoryIssue")
                        .WithMany("Issues")
                        .HasForeignKey("CategoryIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Topic", "Topic")
                        .WithMany("TopicIssues")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("Issue")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryIssue");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("Resources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.ResourceLike", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", "Resource")
                        .WithMany("ResourceLikes")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("ResourceLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Topic", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Video", "Video")
                        .WithMany("Topics")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.UserCourses", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", "Course")
                        .WithMany("UsersCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Category", b =>
                {
                    b.Navigation("CategoryResources");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryCourse", b =>
                {
                    b.Navigation("CategoryCourseCourses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.CategoryIssue", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Comment", b =>
                {
                    b.Navigation("CommentLikes");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Course", b =>
                {
                    b.Navigation("CategoryCourseCourses");

                    b.Navigation("Topics");

                    b.Navigation("UsersCourses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Resource", b =>
                {
                    b.Navigation("CategoryResources");

                    b.Navigation("Comments");

                    b.Navigation("ResourceLikes");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Topic", b =>
                {
                    b.Navigation("TopicIssues");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.User", b =>
                {
                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");

                    b.Navigation("Issue");

                    b.Navigation("ResourceLikes");

                    b.Navigation("Resources");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("_Project_CheatSheet.Infrastructure.Data.SQL.Models.Video", b =>
                {
                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
